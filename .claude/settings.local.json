{
  "permissions": {
    "allow": [
      "WebFetch(domain:docs.anthropic.com)",
      "mcp__debug__getFileContent",
      "mcp__debug__debug",
      "Bash(python3:*)",
      "Bash(mkdir:*)",
      "Bash(touch:*)",
      "Bash(tree:*)",
      "Bash(npm:*)",
      "Bash(tsc:*)",
      "Bash(git:*)",
      "Bash(make:*)",
      "Bash(pio:*)",
      "Bash(just:*)",
      "Bash(gh:*)",
      "Bash(cat:*)",
      "Bash(cd:*)",
      "Bash(flutter:*)",
      "Bash(dart:*)",
      "Bash(docker:*)",
      "Bash(ls:*)",
      "Bash(grep:*)",
      "Bash(pytest:*)",
      "Bash(head:*)",
      "Bash(jq:*)",
      "Bash(python:*)",
      "Bash(find:*)",
      "Bash(PAGER=cat:*)",
      "Bash(pip3 install:*)",
      "Bash(source:*)",
      "Bash(pip install:*)",
      "Bash(PYTHONPATH=/workspaces/q-d-repl python3 -m pytest tests/test_breakrepl.py -v)",
      "Bash(ls:*)",
      "Bash(grep:*)",
      "Bash(echo:*)",
      "Bash(find:*)",
      "Bash(./debug_repl_test.sh:*)",
      "Bash(cat:*)",
      "Bash(time python3 -m pytest:*)",
      "Bash(PYTHONPATH=:*)",
      "Bash(pydebug:*)",
      "Bash(export:*)",
      "Bash(60 )",
      "Bash(\"print(''Graph type:'', type(graph)); print(''Nodes:'', graph.number_of_nodes() if hasattr(graph, ''number_of_nodes'') else ''N/A''); print(''Edges:'', graph.number_of_edges() if hasattr(graph, ''number_of_edges'') else ''N/A'')\" )",
      "Bash(-- )",
      "Bash(-k test_complete_pipeline_with_real_llm )",
      "Bash(-xvs )",
      "Bash(--tb=short)",
      "Bash(60 )",
      "Bash(\"print(''Graph type:'', type(graph)); print(''Nodes:'', graph.number_of_nodes() if hasattr(graph, ''number_of_nodes'') else ''N/A''); print(''Edges:'', graph.number_of_edges() if hasattr(graph, ''number_of_edges'') else ''N/A'')\" )",
      "Bash(-- )",
      "Bash(-k test_complete_pipeline_with_real_llm )",
      "Bash(-xvs )",
      "Bash(44 )",
      "Bash(\"print(f''test_var = {test_var}'')\" )",
      "Bash(-- )",
      "Bash(-k test_complete_pipeline_with_real_llm )",
      "Bash(-xvs )",
      "Bash(--tb=no)",
      "Bash(44 )",
      "Bash(\"print(f''test_var = {test_var}'')\" )",
      "Bash(-- )",
      "Bash(-k test_complete_pipeline_with_real_llm )",
      "Bash(-xvs )",
      "Bash(*pydebug*)",
      "Bash(echo '*)",
      "Bash(sed:*)",
      "Base(pydebug:*)",
      "Bash(mv:*)",
      "Bash(echo*)",
      "Bash(pydebug-stdin*)",
      "Bash(./pydebug:*)"
    ],
    "deny": []
  }
}